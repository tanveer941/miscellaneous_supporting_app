// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Radar.proto

#ifndef PROTOBUF_Radar_2eproto__INCLUDED
#define PROTOBUF_Radar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Radar {
class BSigDataOfEachSignal;
class BSigDataOfEachSignalDefaultTypeInternal;
extern BSigDataOfEachSignalDefaultTypeInternal _BSigDataOfEachSignal_default_instance_;
class BsigDataRequest;
class BsigDataRequestDefaultTypeInternal;
extern BsigDataRequestDefaultTypeInternal _BsigDataRequest_default_instance_;
class BsigDataResponse;
class BsigDataResponseDefaultTypeInternal;
extern BsigDataResponseDefaultTypeInternal _BsigDataResponse_default_instance_;
}  // namespace Radar

namespace Radar {

namespace protobuf_Radar_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Radar_2eproto

// ===================================================================

class BsigDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Radar.BsigDataRequest) */ {
 public:
  BsigDataRequest();
  virtual ~BsigDataRequest();

  BsigDataRequest(const BsigDataRequest& from);

  inline BsigDataRequest& operator=(const BsigDataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BsigDataRequest& default_instance();

  static inline const BsigDataRequest* internal_default_instance() {
    return reinterpret_cast<const BsigDataRequest*>(
               &_BsigDataRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BsigDataRequest* other);

  // implements Message ----------------------------------------------

  inline BsigDataRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BsigDataRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BsigDataRequest& from);
  void MergeFrom(const BsigDataRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BsigDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string signalNames = 3;
  int signalnames_size() const;
  void clear_signalnames();
  static const int kSignalNamesFieldNumber = 3;
  const ::std::string& signalnames(int index) const;
  ::std::string* mutable_signalnames(int index);
  void set_signalnames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_signalnames(int index, ::std::string&& value);
  #endif
  void set_signalnames(int index, const char* value);
  void set_signalnames(int index, const char* value, size_t size);
  ::std::string* add_signalnames();
  void add_signalnames(const ::std::string& value);
  #if LANG_CXX11
  void add_signalnames(::std::string&& value);
  #endif
  void add_signalnames(const char* value);
  void add_signalnames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& signalnames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_signalnames();

  // string bsigPath = 1;
  void clear_bsigpath();
  static const int kBsigPathFieldNumber = 1;
  const ::std::string& bsigpath() const;
  void set_bsigpath(const ::std::string& value);
  #if LANG_CXX11
  void set_bsigpath(::std::string&& value);
  #endif
  void set_bsigpath(const char* value);
  void set_bsigpath(const char* value, size_t size);
  ::std::string* mutable_bsigpath();
  ::std::string* release_bsigpath();
  void set_allocated_bsigpath(::std::string* bsigpath);

  // int32 objectIdCount = 2;
  void clear_objectidcount();
  static const int kObjectIdCountFieldNumber = 2;
  ::google::protobuf::int32 objectidcount() const;
  void set_objectidcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Radar.BsigDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> signalnames_;
  ::google::protobuf::internal::ArenaStringPtr bsigpath_;
  ::google::protobuf::int32 objectidcount_;
  mutable int _cached_size_;
  friend struct protobuf_Radar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BSigDataOfEachSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Radar.BSigDataOfEachSignal) */ {
 public:
  BSigDataOfEachSignal();
  virtual ~BSigDataOfEachSignal();

  BSigDataOfEachSignal(const BSigDataOfEachSignal& from);

  inline BSigDataOfEachSignal& operator=(const BSigDataOfEachSignal& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BSigDataOfEachSignal& default_instance();

  static inline const BSigDataOfEachSignal* internal_default_instance() {
    return reinterpret_cast<const BSigDataOfEachSignal*>(
               &_BSigDataOfEachSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BSigDataOfEachSignal* other);

  // implements Message ----------------------------------------------

  inline BSigDataOfEachSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  BSigDataOfEachSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BSigDataOfEachSignal& from);
  void MergeFrom(const BSigDataOfEachSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BSigDataOfEachSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float signalvalues = 3;
  int signalvalues_size() const;
  void clear_signalvalues();
  static const int kSignalvaluesFieldNumber = 3;
  float signalvalues(int index) const;
  void set_signalvalues(int index, float value);
  void add_signalvalues(float value);
  const ::google::protobuf::RepeatedField< float >&
      signalvalues() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_signalvalues();

  // string signalName = 1;
  void clear_signalname();
  static const int kSignalNameFieldNumber = 1;
  const ::std::string& signalname() const;
  void set_signalname(const ::std::string& value);
  #if LANG_CXX11
  void set_signalname(::std::string&& value);
  #endif
  void set_signalname(const char* value);
  void set_signalname(const char* value, size_t size);
  ::std::string* mutable_signalname();
  ::std::string* release_signalname();
  void set_allocated_signalname(::std::string* signalname);

  // int32 objectId = 2;
  void clear_objectid();
  static const int kObjectIdFieldNumber = 2;
  ::google::protobuf::int32 objectid() const;
  void set_objectid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Radar.BSigDataOfEachSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > signalvalues_;
  mutable int _signalvalues_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr signalname_;
  ::google::protobuf::int32 objectid_;
  mutable int _cached_size_;
  friend struct protobuf_Radar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BsigDataResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Radar.BsigDataResponse) */ {
 public:
  BsigDataResponse();
  virtual ~BsigDataResponse();

  BsigDataResponse(const BsigDataResponse& from);

  inline BsigDataResponse& operator=(const BsigDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BsigDataResponse& default_instance();

  static inline const BsigDataResponse* internal_default_instance() {
    return reinterpret_cast<const BsigDataResponse*>(
               &_BsigDataResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BsigDataResponse* other);

  // implements Message ----------------------------------------------

  inline BsigDataResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BsigDataResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BsigDataResponse& from);
  void MergeFrom(const BsigDataResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BsigDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 timeStamp = 1;
  int timestamp_size() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp(int index) const;
  void set_timestamp(int index, ::google::protobuf::uint64 value);
  void add_timestamp(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      timestamp() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_timestamp();

  // repeated .Radar.BSigDataOfEachSignal eachSigValues = 2;
  int eachsigvalues_size() const;
  void clear_eachsigvalues();
  static const int kEachSigValuesFieldNumber = 2;
  const ::Radar::BSigDataOfEachSignal& eachsigvalues(int index) const;
  ::Radar::BSigDataOfEachSignal* mutable_eachsigvalues(int index);
  ::Radar::BSigDataOfEachSignal* add_eachsigvalues();
  ::google::protobuf::RepeatedPtrField< ::Radar::BSigDataOfEachSignal >*
      mutable_eachsigvalues();
  const ::google::protobuf::RepeatedPtrField< ::Radar::BSigDataOfEachSignal >&
      eachsigvalues() const;

  // @@protoc_insertion_point(class_scope:Radar.BsigDataResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > timestamp_;
  mutable int _timestamp_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Radar::BSigDataOfEachSignal > eachsigvalues_;
  mutable int _cached_size_;
  friend struct protobuf_Radar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BsigDataRequest

// string bsigPath = 1;
inline void BsigDataRequest::clear_bsigpath() {
  bsigpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BsigDataRequest::bsigpath() const {
  // @@protoc_insertion_point(field_get:Radar.BsigDataRequest.bsigPath)
  return bsigpath_.GetNoArena();
}
inline void BsigDataRequest::set_bsigpath(const ::std::string& value) {
  
  bsigpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Radar.BsigDataRequest.bsigPath)
}
#if LANG_CXX11
inline void BsigDataRequest::set_bsigpath(::std::string&& value) {
  
  bsigpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Radar.BsigDataRequest.bsigPath)
}
#endif
inline void BsigDataRequest::set_bsigpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bsigpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Radar.BsigDataRequest.bsigPath)
}
inline void BsigDataRequest::set_bsigpath(const char* value, size_t size) {
  
  bsigpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Radar.BsigDataRequest.bsigPath)
}
inline ::std::string* BsigDataRequest::mutable_bsigpath() {
  
  // @@protoc_insertion_point(field_mutable:Radar.BsigDataRequest.bsigPath)
  return bsigpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BsigDataRequest::release_bsigpath() {
  // @@protoc_insertion_point(field_release:Radar.BsigDataRequest.bsigPath)
  
  return bsigpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BsigDataRequest::set_allocated_bsigpath(::std::string* bsigpath) {
  if (bsigpath != NULL) {
    
  } else {
    
  }
  bsigpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bsigpath);
  // @@protoc_insertion_point(field_set_allocated:Radar.BsigDataRequest.bsigPath)
}

// int32 objectIdCount = 2;
inline void BsigDataRequest::clear_objectidcount() {
  objectidcount_ = 0;
}
inline ::google::protobuf::int32 BsigDataRequest::objectidcount() const {
  // @@protoc_insertion_point(field_get:Radar.BsigDataRequest.objectIdCount)
  return objectidcount_;
}
inline void BsigDataRequest::set_objectidcount(::google::protobuf::int32 value) {
  
  objectidcount_ = value;
  // @@protoc_insertion_point(field_set:Radar.BsigDataRequest.objectIdCount)
}

// repeated string signalNames = 3;
inline int BsigDataRequest::signalnames_size() const {
  return signalnames_.size();
}
inline void BsigDataRequest::clear_signalnames() {
  signalnames_.Clear();
}
inline const ::std::string& BsigDataRequest::signalnames(int index) const {
  // @@protoc_insertion_point(field_get:Radar.BsigDataRequest.signalNames)
  return signalnames_.Get(index);
}
inline ::std::string* BsigDataRequest::mutable_signalnames(int index) {
  // @@protoc_insertion_point(field_mutable:Radar.BsigDataRequest.signalNames)
  return signalnames_.Mutable(index);
}
inline void BsigDataRequest::set_signalnames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Radar.BsigDataRequest.signalNames)
  signalnames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BsigDataRequest::set_signalnames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Radar.BsigDataRequest.signalNames)
  signalnames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BsigDataRequest::set_signalnames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  signalnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Radar.BsigDataRequest.signalNames)
}
inline void BsigDataRequest::set_signalnames(int index, const char* value, size_t size) {
  signalnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Radar.BsigDataRequest.signalNames)
}
inline ::std::string* BsigDataRequest::add_signalnames() {
  // @@protoc_insertion_point(field_add_mutable:Radar.BsigDataRequest.signalNames)
  return signalnames_.Add();
}
inline void BsigDataRequest::add_signalnames(const ::std::string& value) {
  signalnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Radar.BsigDataRequest.signalNames)
}
#if LANG_CXX11
inline void BsigDataRequest::add_signalnames(::std::string&& value) {
  signalnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Radar.BsigDataRequest.signalNames)
}
#endif
inline void BsigDataRequest::add_signalnames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  signalnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Radar.BsigDataRequest.signalNames)
}
inline void BsigDataRequest::add_signalnames(const char* value, size_t size) {
  signalnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Radar.BsigDataRequest.signalNames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BsigDataRequest::signalnames() const {
  // @@protoc_insertion_point(field_list:Radar.BsigDataRequest.signalNames)
  return signalnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BsigDataRequest::mutable_signalnames() {
  // @@protoc_insertion_point(field_mutable_list:Radar.BsigDataRequest.signalNames)
  return &signalnames_;
}

// -------------------------------------------------------------------

// BSigDataOfEachSignal

// string signalName = 1;
inline void BSigDataOfEachSignal::clear_signalname() {
  signalname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BSigDataOfEachSignal::signalname() const {
  // @@protoc_insertion_point(field_get:Radar.BSigDataOfEachSignal.signalName)
  return signalname_.GetNoArena();
}
inline void BSigDataOfEachSignal::set_signalname(const ::std::string& value) {
  
  signalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Radar.BSigDataOfEachSignal.signalName)
}
#if LANG_CXX11
inline void BSigDataOfEachSignal::set_signalname(::std::string&& value) {
  
  signalname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Radar.BSigDataOfEachSignal.signalName)
}
#endif
inline void BSigDataOfEachSignal::set_signalname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Radar.BSigDataOfEachSignal.signalName)
}
inline void BSigDataOfEachSignal::set_signalname(const char* value, size_t size) {
  
  signalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Radar.BSigDataOfEachSignal.signalName)
}
inline ::std::string* BSigDataOfEachSignal::mutable_signalname() {
  
  // @@protoc_insertion_point(field_mutable:Radar.BSigDataOfEachSignal.signalName)
  return signalname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BSigDataOfEachSignal::release_signalname() {
  // @@protoc_insertion_point(field_release:Radar.BSigDataOfEachSignal.signalName)
  
  return signalname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BSigDataOfEachSignal::set_allocated_signalname(::std::string* signalname) {
  if (signalname != NULL) {
    
  } else {
    
  }
  signalname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signalname);
  // @@protoc_insertion_point(field_set_allocated:Radar.BSigDataOfEachSignal.signalName)
}

// int32 objectId = 2;
inline void BSigDataOfEachSignal::clear_objectid() {
  objectid_ = 0;
}
inline ::google::protobuf::int32 BSigDataOfEachSignal::objectid() const {
  // @@protoc_insertion_point(field_get:Radar.BSigDataOfEachSignal.objectId)
  return objectid_;
}
inline void BSigDataOfEachSignal::set_objectid(::google::protobuf::int32 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:Radar.BSigDataOfEachSignal.objectId)
}

// repeated float signalvalues = 3;
inline int BSigDataOfEachSignal::signalvalues_size() const {
  return signalvalues_.size();
}
inline void BSigDataOfEachSignal::clear_signalvalues() {
  signalvalues_.Clear();
}
inline float BSigDataOfEachSignal::signalvalues(int index) const {
  // @@protoc_insertion_point(field_get:Radar.BSigDataOfEachSignal.signalvalues)
  return signalvalues_.Get(index);
}
inline void BSigDataOfEachSignal::set_signalvalues(int index, float value) {
  signalvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:Radar.BSigDataOfEachSignal.signalvalues)
}
inline void BSigDataOfEachSignal::add_signalvalues(float value) {
  signalvalues_.Add(value);
  // @@protoc_insertion_point(field_add:Radar.BSigDataOfEachSignal.signalvalues)
}
inline const ::google::protobuf::RepeatedField< float >&
BSigDataOfEachSignal::signalvalues() const {
  // @@protoc_insertion_point(field_list:Radar.BSigDataOfEachSignal.signalvalues)
  return signalvalues_;
}
inline ::google::protobuf::RepeatedField< float >*
BSigDataOfEachSignal::mutable_signalvalues() {
  // @@protoc_insertion_point(field_mutable_list:Radar.BSigDataOfEachSignal.signalvalues)
  return &signalvalues_;
}

// -------------------------------------------------------------------

// BsigDataResponse

// repeated uint64 timeStamp = 1;
inline int BsigDataResponse::timestamp_size() const {
  return timestamp_.size();
}
inline void BsigDataResponse::clear_timestamp() {
  timestamp_.Clear();
}
inline ::google::protobuf::uint64 BsigDataResponse::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:Radar.BsigDataResponse.timeStamp)
  return timestamp_.Get(index);
}
inline void BsigDataResponse::set_timestamp(int index, ::google::protobuf::uint64 value) {
  timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:Radar.BsigDataResponse.timeStamp)
}
inline void BsigDataResponse::add_timestamp(::google::protobuf::uint64 value) {
  timestamp_.Add(value);
  // @@protoc_insertion_point(field_add:Radar.BsigDataResponse.timeStamp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BsigDataResponse::timestamp() const {
  // @@protoc_insertion_point(field_list:Radar.BsigDataResponse.timeStamp)
  return timestamp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BsigDataResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:Radar.BsigDataResponse.timeStamp)
  return &timestamp_;
}

// repeated .Radar.BSigDataOfEachSignal eachSigValues = 2;
inline int BsigDataResponse::eachsigvalues_size() const {
  return eachsigvalues_.size();
}
inline void BsigDataResponse::clear_eachsigvalues() {
  eachsigvalues_.Clear();
}
inline const ::Radar::BSigDataOfEachSignal& BsigDataResponse::eachsigvalues(int index) const {
  // @@protoc_insertion_point(field_get:Radar.BsigDataResponse.eachSigValues)
  return eachsigvalues_.Get(index);
}
inline ::Radar::BSigDataOfEachSignal* BsigDataResponse::mutable_eachsigvalues(int index) {
  // @@protoc_insertion_point(field_mutable:Radar.BsigDataResponse.eachSigValues)
  return eachsigvalues_.Mutable(index);
}
inline ::Radar::BSigDataOfEachSignal* BsigDataResponse::add_eachsigvalues() {
  // @@protoc_insertion_point(field_add:Radar.BsigDataResponse.eachSigValues)
  return eachsigvalues_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Radar::BSigDataOfEachSignal >*
BsigDataResponse::mutable_eachsigvalues() {
  // @@protoc_insertion_point(field_mutable_list:Radar.BsigDataResponse.eachSigValues)
  return &eachsigvalues_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Radar::BSigDataOfEachSignal >&
BsigDataResponse::eachsigvalues() const {
  // @@protoc_insertion_point(field_list:Radar.BsigDataResponse.eachSigValues)
  return eachsigvalues_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Radar

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Radar_2eproto__INCLUDED
