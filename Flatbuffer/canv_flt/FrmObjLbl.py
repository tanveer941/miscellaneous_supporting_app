# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FrmObjLbl(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFrmObjLbl(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrmObjLbl()
        x.Init(buf, n + offset)
        return x

    # FrmObjLbl
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FrmObjLbl
    def Imagewidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FrmObjLbl
    def Imageheight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FrmObjLbl
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FrmObjLbl
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FrmObjLbl
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FrmObjLbl
    def Pitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FrmObjLbl
    def Roll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FrmObjLbl
    def Yaw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FrmObjLbl
    def Trackid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FrmObjLbl
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FrmObjLbl
    def Imagename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FrmObjLbl
    def Baseimage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FrmObjLbl
    def Imagedata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FrmObjLbl
    def Hierarchy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FrmObjLbl
    def Imagetype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FrmObjLbl
    def ChannelName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FrmObjLbl
    def Keypoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .keypnt import keypnt
            obj = keypnt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FrmObjLbl
    def Shape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Shp import Shp
            obj = Shp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FrmObjLbl
    def Attributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Atr import Atr
            obj = Atr()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FrmObjLblStart(builder): builder.StartObject(19)
def FrmObjLblAddImagewidth(builder, imagewidth): builder.PrependInt64Slot(0, imagewidth, 0)
def FrmObjLblAddImageheight(builder, imageheight): builder.PrependInt64Slot(1, imageheight, 0)
def FrmObjLblAddHeight(builder, height): builder.PrependFloat32Slot(2, height, 0.0)
def FrmObjLblAddWidth(builder, width): builder.PrependFloat32Slot(3, width, 0.0)
def FrmObjLblAddLength(builder, length): builder.PrependInt64Slot(4, length, 0)
def FrmObjLblAddPitch(builder, pitch): builder.PrependInt64Slot(5, pitch, 0)
def FrmObjLblAddRoll(builder, roll): builder.PrependInt64Slot(6, roll, 0)
def FrmObjLblAddYaw(builder, yaw): builder.PrependInt64Slot(7, yaw, 0)
def FrmObjLblAddTrackid(builder, Trackid): builder.PrependInt64Slot(8, Trackid, 0)
def FrmObjLblAddCategory(builder, category): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(category), 0)
def FrmObjLblAddImagename(builder, imagename): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(imagename), 0)
def FrmObjLblAddBaseimage(builder, baseimage): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(baseimage), 0)
def FrmObjLblAddImagedata(builder, imagedata): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(imagedata), 0)
def FrmObjLblAddHierarchy(builder, Hierarchy): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(Hierarchy), 0)
def FrmObjLblAddImagetype(builder, imagetype): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(imagetype), 0)
def FrmObjLblAddChannelName(builder, ChannelName): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(ChannelName), 0)
def FrmObjLblAddKeypoints(builder, keypoints): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(keypoints), 0)
def FrmObjLblAddShape(builder, shape): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)
def FrmObjLblAddAttributes(builder, attributes): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)
def FrmObjLblEnd(builder): return builder.EndObject()
