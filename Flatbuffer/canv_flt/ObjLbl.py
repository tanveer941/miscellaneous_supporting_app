# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ObjLbl(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObjLbl(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjLbl()
        x.Init(buf, n + offset)
        return x

    # ObjLbl
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjLbl
    def TimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObjLbl
    def FrameNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObjLbl
    def FrameObjectLabels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FrmObjLbl import FrmObjLbl
            obj = FrmObjLbl()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjLbl
    def FrameObjectLabelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ObjLblStart(builder): builder.StartObject(3)
def ObjLblAddTimeStamp(builder, TimeStamp): builder.PrependInt64Slot(0, TimeStamp, 0)
def ObjLblAddFrameNumber(builder, FrameNumber): builder.PrependInt64Slot(1, FrameNumber, 0)
def ObjLblAddFrameObjectLabels(builder, FrameObjectLabels): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(FrameObjectLabels), 0)
def ObjLblStartFrameObjectLabelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ObjLblEnd(builder): return builder.EndObject()
